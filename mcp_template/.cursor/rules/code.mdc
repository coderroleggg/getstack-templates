---
description: 
globs: 
alwaysApply: false
---
# MCP Server Development Rules

## Environment & Setup

- Review the [pyproject.toml](mdc:pyproject.toml) to identify Python version requirements and dependencies
- Use the latest Python features without concern for backward compatibility
- If you need new dependency add it to [pyproject.toml](mdc:pyproject.toml)
- After modifying dependencies always use:
  ```bash
  uv pip install -e .
  ```
- **Run scripts using @uv:**
    ```bash
    uv run python server.py
    ```
  - Do not run scripts directly with `python server.py` or other methods.

## MCP Server Testing

- **DO NOT create test classes or unit tests for MCP server functionality**
- **Instead, ask the user to connect the MCP server to their Cursor IDE using the configuration from README.md**
- For testing MCP server functionality, instruct the user to add this configuration to their `mcp.json` file in Cursor:

```json
{
  "mcpServers": {
    "mcp_template": {
      "command": "uv",
      "args": [
        "run",
        "--directory",
        "/path/to/your/mcp_template", 
        "server"
      ],
      "env": {
        "TEST_ENV": "your_test_value"
      },
      "description": "Your MCP server description"
    }
  }
}
```

- After connecting, the user can test tools directly through the Cursor interface
- This is the proper way to verify MCP server functionality

## Type Annotations

- Add type hints for all variables, parameters, and return values
- Type annotations will be checked by mypy
- If you're unsure about the correct type, use `Any` from `typing` module
- Let the user add type ignores if necessary
- **Do not use abstract or large types** (`Set`, `Tuple`, `Sequence`, etc.).
    - Use only the basic types:  
    - Example:
        ```python
        # correct
        def process_items(items: list) -> dict:
            ...

        # incorrect
        def process_items(items: Sequence[Any]) -> Mapping:
            ...
        ```

## MCP Tool Development

- Use the `@mcp.tool()` decorator for all MCP tools
- Follow the pattern from existing tools in [server.py](mdc:server.py)
- Always include proper error handling in tool functions:
  ```python
  @mcp.tool("tool_name")
  def tool_function(param: str) -> dict[str, Any]:
      """Tool description."""
      try:
          # Tool logic here
          return {"success": True, "result": "data"}
      except Exception as e:
          logger.error(f"Error in tool_function: {e}")
          return {"success": False, "error": str(e)}
  ```
- Include comprehensive docstrings with parameter descriptions
- Return consistent response format with `success` field

## Documentation

- Follow documentation format conventions (Google style or similar)
- **Document all MCP tools with clear parameter descriptions**
- Document complex functions, classes, and methods
- Do not add docstrings to simple functions or lines of code

## Logging

- Create module-specific loggers:
  ```python
  import logging
  logger = logging.getLogger(__name__)
  ```
- Log useful information at appropriate levels
- Always use `logger.exception()` for error logging to capture stack traces:
  ```python
  try:
      # code
  except Exception:
      logger.exception("Error occurred while processing data")
      raise
  ```
- **Do not configure logging manually.**
  - Use the default configuration or the one provided by the project infrastructure.

## File System Operations

- Always use `pathlib` instead of `os.path`:
  ```python
  from pathlib import Path
  
  data_path = Path("data") / "config.json"
  if data_path.exists():
      with data_path.open() as f:
          # process file
  ```

## Environment Variables

- Use `python-dotenv` to load variables from `.env` file
- Use `os.getenv()` with default values for robust configuration
- Keep sensitive information in environment variables, not in code
- Example:
  ```python
  from dotenv import load_dotenv
  import os
  
  load_dotenv()
  api_key = os.getenv("API_KEY", "default_value")
  ```

## Best Practices

- Implement proper error handling with context managers
- Follow project-specific code organization patterns
- Keep functions small and focused on a single responsibility
- Use pure functions that don't modify state and produce consistent outputs for the same inputs
- Minimize class usage - use them only when truly necessary, always prefer composition over inheritance
- **Do not use relative imports.**
  - Always import using the absolute path from the project root.

## Code Changes

- **Do not change code unless explicitly asked to do so.**
  - Follow the principle of minimal intervention.
- After code changes, always run:
  ```bash
  uv pip install -e .
  ```
- Test changes by connecting to Cursor IDE using the MCP configuration
