---
description: 
globs: 
alwaysApply: true
---
# Python Agent Development Rules

## Environment & Setup

- Review the [pyproject.toml](mdc:pyproject.toml) to identify Python version requirements and dependencies
- Use the latest Python features without concern for backward compatibility
- Use [justfile](mdc:justfile) for easy command management and dependency management
- If you need new dependency add it to [pyproject.toml](mdc:pyproject.toml)
- After modifying dependencies always use:
  ```bash
  just update-deps
  ```
- **Run scripts using @uv:**
    ```bash
    uv run python script.py
    ```
  - Do not run scripts directly with `python script.py` or other methods.

## Type Annotations

- Add type hints for all variables, parameters, and return values
- Type annotations will be checked by mypy
- If you're unsure about the correct type, use `Any` from `typing` module
- Let the user add type ignores if necessary
- **Do not use abstract or largtypes** (`Set`, `Tuple`, `Sequence`, etc.).
    - Use only the basic types:  
    - Example:
        ```python
        # correct
        def process_items(items: list) -> dict:
            ...

        # incorrect
        def process_items(items: Sequence[Any]) -> Mapping:
            ...
        ```

## Documentation

- Follow documentation format conventions (Google style or similar)
- **Document only complex functions, classes, and methods,**
  - and those whose names do not clearly describe what they do.
- Do not add docstrings to simple functions or lines of code.

## Logging

- Create module-specific loggers:
  ```python
  import logging
  logger = logging.getLogger(__name__)
  ```
- Log useful information at appropriate levels
- Always use `logger.exception()` for error logging to capture stack traces:
  ```python
  try:
      # code
  except Exception:
      logger.exception("Error occurred while processing data")
      raise
  ```
- **Do not configure logging manually.**
  - Use the default configuration or the one provided by the project infrastructure.

## File System Operations

- Always use `pathlib` instead of `os.path`:
  ```python
  from pathlib import Path
  
  data_path = Path("data") / "config.json"
  if data_path.exists():
      with data_path.open() as f:
          # process file
  ```

## Best Practices

- Implement proper error handling with context managers
- Follow project-specific code organization patterns
- Keep functions small and focused on a single responsibility
- Use pure functions that don't modify state and produce consistent outputs for the same inputs
- Minimize class usage - use them only when truly necessary, always prefer composition over inheritance
- **Do not use relative imports.**
  - Always import using the absolute path from the project root.

## Code Changes

- **Do not change code unless explicitly asked to do so.**
  - Follow the principle of minimal intervention.
- After code changes, always run:
  ```bash
  just fmt
  just lint
  ```
